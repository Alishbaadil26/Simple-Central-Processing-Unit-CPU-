// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2023 10:09:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab5Combined
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5Combined_vlg_sample_tst(
	clock,
	data_in,
	reset,
	sampler_tx
);
input  clock;
input  data_in;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or data_in or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab5Combined_vlg_check_tst (
	current_State,
	std_ID,
	sampler_rx
);
input [6:0] current_State;
input [6:0] std_ID;
input sampler_rx;

reg [6:0] current_State_expected;
reg [6:0] std_ID_expected;

reg [6:0] current_State_prev;
reg [6:0] std_ID_prev;

reg [6:0] current_State_expected_prev;
reg [6:0] std_ID_expected_prev;

reg [6:0] last_current_State_exp;
reg [6:0] last_std_ID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	current_State_prev = current_State;
	std_ID_prev = std_ID;
end

// update expected /o prevs

always @(trigger)
begin
	current_State_expected_prev = current_State_expected;
	std_ID_expected_prev = std_ID_expected;
end


// expected std_ID[ 6 ]
initial
begin
	std_ID_expected[6] = 1'b0;
end 
// expected std_ID[ 5 ]
initial
begin
	std_ID_expected[5] = 1'b0;
end 
// expected std_ID[ 4 ]
initial
begin
	std_ID_expected[4] = 1'b0;
end 
// expected std_ID[ 3 ]
always
begin
	std_ID_expected[3] = 1'b0;
	std_ID_expected[3] = #80000 1'b1;
	#80000;
end 
// expected std_ID[ 2 ]
always
begin
	std_ID_expected[2] = 1'b0;
	std_ID_expected[2] = #40000 1'b1;
	#40000;
end 
// expected std_ID[ 1 ]
always
begin
	std_ID_expected[1] = 1'b0;
	std_ID_expected[1] = #20000 1'b1;
	#20000;
end 
// expected std_ID[ 0 ]
always
begin
	std_ID_expected[0] = 1'b0;
	std_ID_expected[0] = #10000 1'b1;
	#10000;
end 
// expected current_State[ 6 ]
initial
begin
	current_State_expected[6] = 1'b0;
end 
// expected current_State[ 5 ]
initial
begin
	current_State_expected[5] = 1'b0;
end 
// expected current_State[ 4 ]
initial
begin
	current_State_expected[4] = 1'b0;
end 
// expected current_State[ 3 ]
always
begin
	current_State_expected[3] = 1'b0;
	current_State_expected[3] = #80000 1'b1;
	#80000;
end 
// expected current_State[ 2 ]
always
begin
	current_State_expected[2] = 1'b0;
	current_State_expected[2] = #40000 1'b1;
	#40000;
end 
// expected current_State[ 1 ]
always
begin
	current_State_expected[1] = 1'b0;
	current_State_expected[1] = #20000 1'b1;
	#20000;
end 
// expected current_State[ 0 ]
always
begin
	current_State_expected[0] = 1'b0;
	current_State_expected[0] = #10000 1'b1;
	#10000;
end 
// generate trigger
always @(current_State_expected or current_State or std_ID_expected or std_ID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected current_State = %b | expected std_ID = %b | ",current_State_expected_prev,std_ID_expected_prev);
	$display("| real current_State = %b | real std_ID = %b | ",current_State_prev,std_ID_prev);
`endif
	if (
		( current_State_expected_prev[0] !== 1'bx ) && ( current_State_prev[0] !== current_State_expected_prev[0] )
		&& ((current_State_expected_prev[0] !== last_current_State_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_State[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_State_expected_prev);
		$display ("     Real value = %b", current_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_State_exp[0] = current_State_expected_prev[0];
	end
	if (
		( current_State_expected_prev[1] !== 1'bx ) && ( current_State_prev[1] !== current_State_expected_prev[1] )
		&& ((current_State_expected_prev[1] !== last_current_State_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_State[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_State_expected_prev);
		$display ("     Real value = %b", current_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_State_exp[1] = current_State_expected_prev[1];
	end
	if (
		( current_State_expected_prev[2] !== 1'bx ) && ( current_State_prev[2] !== current_State_expected_prev[2] )
		&& ((current_State_expected_prev[2] !== last_current_State_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_State[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_State_expected_prev);
		$display ("     Real value = %b", current_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_State_exp[2] = current_State_expected_prev[2];
	end
	if (
		( current_State_expected_prev[3] !== 1'bx ) && ( current_State_prev[3] !== current_State_expected_prev[3] )
		&& ((current_State_expected_prev[3] !== last_current_State_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_State[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_State_expected_prev);
		$display ("     Real value = %b", current_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_State_exp[3] = current_State_expected_prev[3];
	end
	if (
		( current_State_expected_prev[4] !== 1'bx ) && ( current_State_prev[4] !== current_State_expected_prev[4] )
		&& ((current_State_expected_prev[4] !== last_current_State_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_State[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_State_expected_prev);
		$display ("     Real value = %b", current_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_State_exp[4] = current_State_expected_prev[4];
	end
	if (
		( current_State_expected_prev[5] !== 1'bx ) && ( current_State_prev[5] !== current_State_expected_prev[5] )
		&& ((current_State_expected_prev[5] !== last_current_State_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_State[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_State_expected_prev);
		$display ("     Real value = %b", current_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_State_exp[5] = current_State_expected_prev[5];
	end
	if (
		( current_State_expected_prev[6] !== 1'bx ) && ( current_State_prev[6] !== current_State_expected_prev[6] )
		&& ((current_State_expected_prev[6] !== last_current_State_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_State[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_State_expected_prev);
		$display ("     Real value = %b", current_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_State_exp[6] = current_State_expected_prev[6];
	end
	if (
		( std_ID_expected_prev[0] !== 1'bx ) && ( std_ID_prev[0] !== std_ID_expected_prev[0] )
		&& ((std_ID_expected_prev[0] !== last_std_ID_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port std_ID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", std_ID_expected_prev);
		$display ("     Real value = %b", std_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_std_ID_exp[0] = std_ID_expected_prev[0];
	end
	if (
		( std_ID_expected_prev[1] !== 1'bx ) && ( std_ID_prev[1] !== std_ID_expected_prev[1] )
		&& ((std_ID_expected_prev[1] !== last_std_ID_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port std_ID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", std_ID_expected_prev);
		$display ("     Real value = %b", std_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_std_ID_exp[1] = std_ID_expected_prev[1];
	end
	if (
		( std_ID_expected_prev[2] !== 1'bx ) && ( std_ID_prev[2] !== std_ID_expected_prev[2] )
		&& ((std_ID_expected_prev[2] !== last_std_ID_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port std_ID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", std_ID_expected_prev);
		$display ("     Real value = %b", std_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_std_ID_exp[2] = std_ID_expected_prev[2];
	end
	if (
		( std_ID_expected_prev[3] !== 1'bx ) && ( std_ID_prev[3] !== std_ID_expected_prev[3] )
		&& ((std_ID_expected_prev[3] !== last_std_ID_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port std_ID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", std_ID_expected_prev);
		$display ("     Real value = %b", std_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_std_ID_exp[3] = std_ID_expected_prev[3];
	end
	if (
		( std_ID_expected_prev[4] !== 1'bx ) && ( std_ID_prev[4] !== std_ID_expected_prev[4] )
		&& ((std_ID_expected_prev[4] !== last_std_ID_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port std_ID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", std_ID_expected_prev);
		$display ("     Real value = %b", std_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_std_ID_exp[4] = std_ID_expected_prev[4];
	end
	if (
		( std_ID_expected_prev[5] !== 1'bx ) && ( std_ID_prev[5] !== std_ID_expected_prev[5] )
		&& ((std_ID_expected_prev[5] !== last_std_ID_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port std_ID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", std_ID_expected_prev);
		$display ("     Real value = %b", std_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_std_ID_exp[5] = std_ID_expected_prev[5];
	end
	if (
		( std_ID_expected_prev[6] !== 1'bx ) && ( std_ID_prev[6] !== std_ID_expected_prev[6] )
		&& ((std_ID_expected_prev[6] !== last_std_ID_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port std_ID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", std_ID_expected_prev);
		$display ("     Real value = %b", std_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_std_ID_exp[6] = std_ID_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab5Combined_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg data_in;
reg reset;
// wires                                               
wire [6:0] current_State;
wire [6:0] std_ID;

wire sampler;                             

// assign statements (if any)                          
lab5Combined i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.current_State(current_State),
	.data_in(data_in),
	.reset(reset),
	.std_ID(std_ID)
);

// clock
initial
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
end 

// data_in
initial
begin
	data_in = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

lab5Combined_vlg_sample_tst tb_sample (
	.clock(clock),
	.data_in(data_in),
	.reset(reset),
	.sampler_tx(sampler)
);

lab5Combined_vlg_check_tst tb_out(
	.current_State(current_State),
	.std_ID(std_ID),
	.sampler_rx(sampler)
);
endmodule

